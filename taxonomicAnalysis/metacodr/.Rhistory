otherFlag <- FALSE}
}
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE}
}
while (flag <- TRUE){
otherFlag <- TRUE
for (i in 1:lsatLen){
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
}
}
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE}
}
flag <- TRUE
while (flag <- TRUE){
otherFlag <- TRUE
for (i in 1:lsatLen){
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
}
}
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE
}
}
while (flag <- TRUE){
otherFlag <- TRUE
for (i in 1:lsatLen){
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
}
}
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE
}
}
while (flag <- TRUE){
otherFlag <- TRUE
for (i in 1:lsatLen){
if (LSAT[i] >3){
print(LSAT[i])
}
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
}
}
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE
}
}
otherFlag <- TRUE
for (i in 1:lsatLen){
if (LSAT[i] >3){
print(LSAT[i])
}
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
}
}
for (i in 1:lsatLen){
if (LSAT[i] >3){
print(LSAT[i])
}
if (LSAT[i + 1] < LSAT[i] == TRUE){
LSAT[i+1]
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i+1] <- temp
otherFlag <- FALSE
if (i == lsatLen && otherFlag == TRUE){
flag <- FALSE}
}
}
for (i in 1:lsatLen){
if (LSAT[i] > 3){
print(LSAT[i])
}
}
for (i in 1:lsatLen){
if (LSAT[i] > 3){
print(LSAT[i])
}
else{
pass
}
}
for (i in 1:lsatLen-1){
if (LSAT[i] > 3){
print(LSAT[i])
}
}
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
#Get the lenght of LSAT
lsatLen <- 0
for (i in LSAT){
lsatLen <- lsatLen + 1
}
#Get the total of LSAT
lsatSum <- 0
for (i in 1:lsatLen){
lsatSum <- lsatSum + LSAT[i]
}
#Get the average LSAT score
lsatAvg <- lsatSum / lsatLen
#Get the median LSAT score
sortedLSAT <- c()
for (i in 1:lsatLen){
if (LSAT[i] > 3){
print(LSAT[i])
}
}
for (i in 1:lsatLen){
if (LSAT[i+1] > LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
}
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
for (i in 1:lsatLen){
if (LSAT[i+1] > LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
}
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
for (i in 1:lsatLen-1){
if (LSAT[i+1] > LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
}
for (i in 1:(lsatLen-1){
for (i in 1:(lsatLen-1)){
if (LSAT[i+1] > LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
}
LSAT
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
for (i in 1:(lsatLen-1)){
if (LSAT[i+1] < LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
}
LSAT
flag <- TRUE
while (flag == TRUE){
for (i in 1:(lsatLen-1)){
if (LSAT[i+1] < LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
}
flag <- FALSE
}
}
LSAT
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
flag <- TRUE
while (flag == TRUE){
otherFlag <- TRUE
for (i in 1:(lsatLen-1)){
if (LSAT[i+1] < LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
otherFlag <- FALSE
}
if (i== (lsatLen - 1) && otherFlag == TRUE){
flag <- FALSE
}
}
}
LSAT
#Get the median of the LSAT scores
median <- LSAT((lsatLen + 1) /2)
#Get the median of the LSAT scores
median <- LSAT[(lsatLen + 1) /2]
median(LSAT)
median
#Get the Lower Quartile
lsatLen
#Get the Lower Quartile
lsatLen /4
#Get the Lower Quartile
(lsatLen + 1)/4
#Get the Lower Quartile
mean(c(LSAT[2], LSAT[3]))
quantile(LSAT, 0.25)
quantile(LSAT, 0.75)
#Get the Lower Quartile
LSAT[((lsatLen + 1) /2) /2]
#Get the Lower Quartile
((lsatLen + 1) /2) /2
#Get the Lower Quartile
((lsatLen) /2) /2
#Get the Lower Quartile
mean(c(((lsatLen) /2) /2), ((lsatLen+1)/2) /2)
LSAT[((lsatLen + 1) /2) /2]
#Get the Lower Quartile
mean(c(LSAT[(lsatLen/2) /2], LSAT[((lsatLen+1)/2) /2]))
#Get the Lower Quartile
mean(c(LSAT[(lsatLen/2) /2], LSAT[(((lsatLen)/2) +1) /2]))
#Get the Lower Quartile
mean(c(LSAT[(lsatLen/2) /2], LSAT[(((lsatLen)/2) +1) /2]))
#Get the Lower Quartile
mean(c(LSAT[(lsatLen+1/2) /2], LSAT[(((lsatLen+2)/2)) /2]))
mean(c(1,2))
#Get the Lower Quartile
mean(c(LSAT[(lsatLen-1/2) /2], LSAT[(((lsatLen)/2)) /2]))
#Get the Lower Quartile
LSAT
#Get the Lower Quartile
(572 + 575) / 2
quantile(LSAT, 0.25)
mean(c(LSAT[((lsatLen+1/2)+1 /2)], LSAT[((lsatLen +1)/2) /2]))
index.1 <- ((lsatLen + 1) /2) /2
index.1
index.2 <- (((lsatLen + 1)/2)/2)+ 1
mean(c(LSAT[index.1], LSAT[index.2]))
quart.25 <- (LSAT[index.1]+ LSAT[index.2])/2
quart.25
#Get the Lower Quartile
lower.1 <- ((lsatLen + 1)/2)/2
lower.2 <- (((lsatLen + 1)/2)/2)+ 1
quart.25 <- (LSAT[lower.1]+ LSAT[lower.2])/2
?quart
?quartile
?quantile
#Get the Lower Quartile
lower.1 <- (lsatLen + 1)/ 4
lower.2 <- ((lsatLen + 1)/4)+ 1
quart.25 <- (LSAT[lower.1]+ LSAT[lower.2])/2
quart.25
quantile(LSAT, 0.25)
#Get the upper Quartile
upper.1 <- ((lsatLen + 1) / 2) + (lsatLen + 1)/4
upper.2 <- ((lsatLen + 1) / 2) + ((lsatLen + 1)/4)+ 1
quart.75 <- (LSAT[upper.1]+ LSAT[upper.2])/2
quart.75
quantile(LSAT, 0.75)
upper.2 <- ((lsatLen) / 2) + ((lsatLen + 1)/4)+ 1
#Get the upper Quartile
upper.1 <- ((lsatLen) / 2) + (lsatLen + 1)/4
upper.2 <- ((lsatLen) / 2) + ((lsatLen + 1)/4)+ 1
quart.75 <- (LSAT[upper.1]+ LSAT[upper.2])/2
quart.75
quantile(LSAT, 0.75)
#Get the minimum
mininum <- LSAT[1]
#Get the maximum
maximum <- LSAT[lsatLen]
range(LSAT)
minimum
maximum
#Get the minimum
minimum <- LSAT[1]
#Get the maximum
maximum <- LSAT[lsatLen]
minimum
maximum
2.5 / (100 * (lsatLen) + 1)
quantile(LSAT, 0.025)
sum(LSAT) * (2.5 / (100 * (lsatLen) + 1))
sum(LSAT) * (2.5 / (100 * (lsatLen + 1)))
LSAT
(lsatLen + 1)*(2.5/100)
ind <- (lsatLen + 1)*(2.5/100)
LSAT[2]*ind
ind <- (lsatLen + 1)*(95/100)
ind
diff <- LSAT[16] - LSAT[15]
LSAT[15] + 0.2(diff)
LSAT[15] + 0.2*(diff)
ind <- (lsatLen + 1)*(95/100)
differ <- LSAT[16] - LSAT[15]
LSAT[15] + 0.2*differ
LSAT[15]
0.2*differ
differ
ind <- (lsatLen )*(95/100)
differ <- LSAT[15] - LSAT[14]
differ
LSAT[15] + 0.2*differ
quantile(LSAT, 0.95)
ind <- (lsatLen)*(95/100)
ind
LSAT[15] + 0.25*differ
LSAT[14] + 0.25*differ
ind <- (lsatLen + 1)*(95/100)
ind
differ <- LSAT[15] - LSAT[14]
differ
LSAT[14] + 0.2*differ
ind <- (lsatLen)*(95/100)
ind
differ <- LSAT[15] - LSAT[14]
LSAT[14] + 0.25*differ
value <- (2.5/100)(lsatLen + 1)
value <- (2.5/100)*(lsatLen + 1)
value
mean(c(LSAT[1], LSAT[2]))
quantile(LSAT, 0.025)
LSAT
mean(c(LSAT[1], LSAT[2]))
value <- (2.5/100)*(lsatLen)
value
value <- (60/100)*(lsatLen)
value
quantile(LSAT, 0.60)
value <- (60/100)*(lsatLen+1)
value
quantile(LSAT)
quart.75
quart.25
LSAT
value <- (60/100)*(lsatLen)+1
value
quantile(LSAT, 0.60)
value <- (60/100)*(lsatLen + 1)
value
mean(c(594, 605))
LSAT[9] + 0.6(LSAT[9])
LSAT[9] + 0.6*(LSAT[9])
(LSAT[9] + 0.6*(LSAT[9]))/2
(LSAT[9] + 0.6*(LSAT[10]))/2
(LSAT[10] + 0.6*(LSAT[11]))/2
quantile(LSAT, 0.60)
(LSAT[8] + 0.6*(LSAT[9]))
LSAT=c(576, 635, 558, 578, 666, 580, 555, 661, 651, 605, 653, 575, 545, 572, 594)
#Get the lenght of LSAT
lsatLen <- 0
for (i in LSAT){
lsatLen <- lsatLen + 1
}
lsatLen
#Get the total of LSAT
lsatSum <- 0
for (i in 1:lsatLen){
lsatSum <- lsatSum + LSAT[i]
}
#Get the average LSAT score
lsatAvg <- lsatSum / lsatLen
#Sort the list in ascending order
flag <- TRUE
while (flag == TRUE){
otherFlag <- TRUE
for (i in 1:(lsatLen-1)){
if (LSAT[i+1] < LSAT[i]){
temp <- LSAT[i]
LSAT[i] <- LSAT[i + 1]
LSAT[i + 1] <- temp
otherFlag <- FALSE
}
if (i== (lsatLen - 1) && otherFlag == TRUE){
flag <- FALSE
}
}
}
lsatLen
#Get the median of the LSAT scores
median <- LSAT[(lsatLen + 1) /2]
#Get the Lower Quartile
lower.1 <- (lsatLen + 1)/ 4
lower.2 <- ((lsatLen + 1)/4)+ 1
quart.25 <- (LSAT[lower.1]+ LSAT[lower.2])/2
quart.25
quantile(LSAT, 0.25)
#Get the upper Quartile
upper.1 <- (lsatLen / 2) + (lsatLen + 1)/4
upper.2 <- (lsatLen / 2) + ((lsatLen + 1)/4)+ 1
quart.75 <- (LSAT[upper.1]+ LSAT[upper.2])/2
quart.75
quantile(LSAT, 0.75)
#Get the minimum
minimum <- LSAT[1]
#Get the maximum
maximum <- LSAT[lsatLen]
quantile(LSAT)
value <- (60/100)*(lsatLen + 1)
value
value <- (60/100)*(lsatLen)
value
LSAT[9]
quantile(LSAT, 0.60)
mean(c(LSAT[9], LSAT[10]))
mean(c(LSAT[10], LSAT[11]))
mean(c(LSAT[8], LSAT[9]))
value <- (35/100)*(lsatLen)
value
0.25*(LSAT[6]-LSAT[5])
LSAT[6]-LSAT[5]
diff <- 0.25*(LSAT[6]-LSAT[5])
tile <- LSAT[6] + diff
tile
quantile(LSAT, 0.35)
0.35*(lsatLen + 1)
LSAT[6] - LSAT[7]
LSAT[7] - LSAT[6]
(LSAT[7] - LSAT[6]) * 0.6
LSAT[6] + 1.2
quantile(LSAT, 0.35)
quantile(LSAT, 0.95)
0.95*(lsatLen + 1)
(LSAT[15] - LSAT[14]) * 0.2
LSAT[14] + 1.2
quantile(LSAT, 0.95)
0.95*(lsatLen)
(LSAT[15] - LSAT[14]) * 0.25
LSAT[14] + 1.25
setwd("/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/")
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
tax_data$`OTUs` <- as.character(tax_data$`OTUs`) # Must be same type for join to work
otu_data$OTUs <- as.character(otu_data$OTUs) # Must be same type for join to work
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs")) # identifies cols with shared IDs
otu_data
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
obj
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
ps_obj
#Filter Out Low Abundances
obj$data$tax_data <- zero_low_counts(obj, "tax_data", min_count = 2,
other_cols = TRUE)
no_reads <- rowSums(obj$data$tax_data[, zeb_samples$Sample_Id]) == 0
sum(no_reads)
obj <- filter_obs(obj, "tax_data", ! no_reads, drop_taxa = TRUE)
obj$data$tax_data <- calc_obs_props(obj, "tax_data")
print(obj)
obj$data$tax_abund <- calc_taxon_abund(obj, "tax_data",
cols = zeb_samples$Sample_Id)
obj$data$tax_occ <- calc_n_samples(obj, "tax_abund", groups = zeb_samples$Group,
cols = zeb_samples$Sample_Id)
###### Alpha Diversity #######
zeb_samples$alpha <- diversity(obj$data$tax_abund[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "shannon")
ggplot(zeb_samples, aes(x = Group, y = alpha)) +
geom_boxplot()
anova_result <- aov(alpha ~ Group, zeb_samples)
TukeyHSD(anova_result)
aov
?aov()
?diversity()
?TurkeyHSD
?TurkeyHSD()
?TukeyHSD()
anova_result <- t.test(alpha ~ Group, zeb_samples)
t_test.result <- t.test(alpha ~ Group, zeb_samples)
t_test.result
TukeyHSD(t_test.result)
t_test.result <- t.test(alpha ~ Group, zeb_samples)
t_test.result
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
ggplot(zeb_samples, aes(x = Group, y = alpha)) +
geom_boxplot() +
ggtitle("Alpha diversity") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Dietary Iron Level") +
ylab("Shannon diversity index")
ggsave("shannon_diversity.png", width = 4, height =5, dpi = 300)
ggsave("shannon_diversity.png", width = 4, height =3, dpi = 300)
ggplot(zeb_samples, aes(x = Group, y = alpha)) +
geom_boxplot()
