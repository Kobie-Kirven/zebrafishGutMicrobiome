linetype="dashed", color = "grey") +
theme(axis.ticks = element_blank()) + xlab("Sample") +
ylab("Most Informative E.C.s")
ggsave("hmp.png", width = 10, height = 8, unit = "cm", dpi=300)
source('/Volumes/UUI/zebrafishGutMicrobiome/functionalAnalysis/weka_heatmap.R', echo=TRUE)
# library
library(igraph)
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.circle, main="circle")
data
network
?graph_from_adjacency_matrix
?graph_from_adj_list
g <- make_ring(10)
al <- as_adj_list(g)
g2 <- graph_from_adj_list(al, mode="all")
graph.isomorphic(g, g2)
ecount(g2)
g3 <- graph_from_adj_list(al, mode="all", duplicate=FALSE)
ecount(g3)
which_multiple(g3)
g <- make_ring(10)
al <- as_adj_list(g)
g2 <- graph_from_adj_list(al, mode="all")
graph.isomorphic(g, g2)
ecount(g2)
g3 <- graph_from_adj_list(al, mode="all", duplicate=FALSE)
ecount(g3)
which_multiple(g3)
graph.isomorphic(g, g3)
g <- make_ring(10, dir=TRUE)
al <- as_adj_list(g, mode="out")
g2 <- graph_from_adj_list(al)
graph.isomorphic(g, g2)
al
g
plot(g2, layout=layout.circle, main="circle")
g <- make_ring(10, dir=TRUE)
al <- as_adj_list(g, mode="out")
g2 <- graph_from_adj_list(al, mode='undirected', diag=F)
plot(g2, layout=layout.circle, main="circle")
?graph_from_adj_list
?make_ring
data
source('~/.active-rstudio-document')
data
network
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.circle, main="circle")
# library
library(igraph)
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
data
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
network
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.circle, main="circle")
source('~/.active-rstudio-document')
# Create data
data <- matrix(sample(0:1, 10, replace=TRUE, prob=c(0.8,0.2)), nrow=10)
data
# Create data
data <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nrow=10)
data
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
network
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.circle, main="circle")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
obj %>%
filter_taxa(grepl(pattern = "^[a-zA-Z]+$", taxon_names)) %>% # remove "odd" taxa
filter_taxa(taxon_ranks == "o", supertaxa = TRUE) %>% # subset to the order rank
heat_tree(node_label = gsub(pattern = "\\[|\\]", replacement = "", taxon_names),
node_size = n_obs,
node_color = n_obs,
node_color_axis_label = "OTU count",
layout = "davidson-harel", initial_layout = "reingold-tilford")
obj %>%
filter_taxa(grepl(pattern = "^[a-zA-Z]+$", taxon_names)) %>% # remove "odd" taxa
filter_taxa(taxon_ranks == "o", supertaxa = TRUE) %>% # subset to the order rank
heat_tree(node_label = gsub(pattern = "\\[|\\]", replacement = "", taxon_names),
node_size = n_obs,
node_color = n_obs,
node_color_axis_label = "OTU count",
layout = "davidson-harel", initial_layout = "reingold-tilford")
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
setwd("/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/")
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
otu_data$OTUs <- as.character(otu_data$OTUs)
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs"))
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
zeb_samples
ggplot(zeb_samples, aes(x = Group, y = alpha)) + theme_classic()+
geom_boxplot(width=0.5, fill="lightgrey", outlier.shape = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Dietary Iron Level") +
ylab("Inverse Simpson Index")
ggsave("invsimpson.png",dpi=600)
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
ordBC = ordinate(mpra, method = "PCoA", distance = DistBC)
plot_ordination(mpra, ordBC) +
geom_point(aes(shape=factor(sample_data(mpra)$Group),
color=factor(sample_data(mpra)$Group)),
size=4) + theme_classic() + theme(legend.title = element_blank())
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
otu_data$OTUs <- as.character(otu_data$OTUs)
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs"))
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
zeb_samples
ggplot(zeb_samples, aes(x = Group, y = alpha)) + theme_classic()+
geom_boxplot(width=0.5, fill="lightgrey", outlier.shape = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Dietary Iron Level") +
ylab("Inverse Simpson Index")
ggsave("invsimpson.png",dpi=600)
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
ordBC = ordinate(mpra, method = "PCoA", distance = DistBC)
plot_ordination(mpra, ordBC) +
geom_point(aes(shape=factor(sample_data(mpra)$Group),
color=factor(sample_data(mpra)$Group)),
size=4) + theme_classic() + theme(legend.title = element_blank())
ggsave("bray_curtis_pcoa.png", dpi=600)
no_reads <- rowSums(obj$data$tax_data[, zeb_samples$Sample_Id]) == 0
obj <- filter_obs(obj, "tax_data", ! no_reads, drop_taxa = TRUE)
obj$data$tax_data <- calc_obs_props(obj, "tax_data")
print(obj)
obj$data$tax_occ <- calc_n_samples(obj, "tax_abund", groups = zeb_samples$Group,
cols = zeb_samples$Sample_Id)
diagdds = phyloseq_to_deseq2(ps_obj, ~ Group)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(ps_obj)[rownames(sigtab), ], "matrix"))
sigtab
#Filter Out Low Abundances
obj$data$tax_data <- zero_low_counts(obj, "tax_data", min_count = 2,
other_cols = TRUE)
library("ggplot2")
theme_set(theme_bw())
#Calculate the abundances
obj$data$tax_abund <- calc_taxon_abund(obj, "tax_data",
cols = zeb_samples$Sample_Id)
#Differential Abundance Analysis
library("DESeq2")
# Phylum order
x = tapply(sigtab$log2FoldChange, sigtab$rank_4, function(x) max(x))
x = sort(x, TRUE)
sigtab$Phylum = factor(as.character(sigtab$rank_4), levels=names(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$rank_5), levels=names(x))
ggsave("diff_abud.png", dpi=450, width=5, height=3, scale=2.2)
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$rank_5, function(x) max(x))
ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=1.5) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sigtab$Phylum = factor(as.character(sigtab$rank_4), levels=names(x))
sigtab = res[which(res$padj < alpha), ]
res = results(diagdds, cooksCutoff = FALSE)
diagdds = phyloseq_to_deseq2(ps_obj, ~ Group)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
library(dplyr)
obj %>%
filter_taxa(grepl(pattern = "^[a-zA-Z]+$", taxon_names)) %>% # remove "odd" taxa
filter_taxa(taxon_ranks == "o", supertaxa = TRUE) %>% # subset to the order rank
heat_tree(node_label = gsub(pattern = "\\[|\\]", replacement = "", taxon_names),
node_size = n_obs,
node_color = n_obs,
node_color_axis_label = "OTU count",
layout = "davidson-harel", initial_layout = "reingold-tilford")
obj
taxon_ranks(obj)
taxon_ranks(obj)
obj %>%
filter_taxa(grepl(pattern = "^[a-zA-Z]+$", taxon_names)) %>% # remove "odd" taxa
filter_taxa(taxon_ranks == "a", supertaxa = TRUE) %>% # subset to the order rank
heat_tree(node_label = gsub(pattern = "\\[|\\]", replacement = "", taxon_names),
node_size = n_obs,
node_color = n_obs,
node_color_axis_label = "OTU count",
layout = "davidson-harel", initial_layout = "reingold-tilford")
setwd("/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/")
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
otu_data$OTUs <- as.character(otu_data$OTUs)
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs"))
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
ps_obj
tax_levels(ps_obj)
tax_table(ps_obj)
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
zeb_samples
ggplot(zeb_samples, aes(x = Group, y = alpha)) + theme_classic()+
geom_boxplot(width=0.5, fill="lightgrey", outlier.shape = 1) +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Dietary Iron Level") +
ylab("Inverse Simpson Index")
ggsave("invsimpson.png",dpi=600)
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
ordBC = ordinate(mpra, method = "PCoA", distance = DistBC)
plot_ordination(mpra, ordBC) +
geom_point(aes(shape=factor(sample_data(mpra)$Group),
color=factor(sample_data(mpra)$Group)),
size=4) + theme_classic() + theme(legend.title = element_blank())
ggsave("bray_curtis_pcoa.png", dpi=600)
#Filter Out Low Abundances
obj$data$tax_data <- zero_low_counts(obj, "tax_data", min_count = 2,
other_cols = TRUE)
no_reads <- rowSums(obj$data$tax_data[, zeb_samples$Sample_Id]) == 0
obj <- filter_obs(obj, "tax_data", ! no_reads, drop_taxa = TRUE)
obj$data$tax_data <- calc_obs_props(obj, "tax_data")
print(obj)
#Calculate the abundances
obj$data$tax_abund <- calc_taxon_abund(obj, "tax_data",
cols = zeb_samples$Sample_Id)
obj$data$tax_occ <- calc_n_samples(obj, "tax_abund", groups = zeb_samples$Group,
cols = zeb_samples$Sample_Id)
diagdds = phyloseq_to_deseq2(ps_obj, ~ Group)
#Differential Abundance Analysis
library("DESeq2")
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(ps_obj)[rownames(sigtab), ], "matrix"))
sigtab
library("ggplot2")
theme_set(theme_bw())
# Phylum order
x = tapply(sigtab$log2FoldChange, sigtab$rank_4, function(x) max(x))
x = sort(x, TRUE)
sigtab$Phylum = factor(as.character(sigtab$rank_4), levels=names(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$rank_5), levels=names(x))
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$rank_5, function(x) max(x))
ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=1.5) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sigtab
print(obj)
ps_obj
tax_table(ps_obj)
diagdds = phyloseq_to_deseq2(ps_obj, ~ Group)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(ps_obj)[rownames(sigtab), ], "matrix"))
sigtab
library("ggplot2")
theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
scale_fill_brewer(palette = palname, ...)
}
sigtab
# Phylum order
x = tapply(sigtab$log2FoldChange, sigtab$rank_4, function(x) max(x))
x = sort(x, TRUE)
sigtab$Phylum = factor(as.character(sigtab$rank_4), levels=names(x))
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$rank_5, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$rank_5), levels=names(x))
ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=rank_4)) + geom_point(size=1.5) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggplot(sigtab, aes(x=Genus, y=log2FoldChange, color=Phylum)) + geom_point(size=1.5) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
DistBC = distance(mpra, method = "bray")
setwd("/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/")
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
otu_data$OTUs <- as.character(otu_data$OTUs)
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs"))
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
mpra
library(phyloseq)
DistBC = distance(mpra, method = "bray")
source('/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/metacodr_analaysis.R')
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
ordBC = ordinate(mpra, method = "PCoA", distance = DistBC)
plot_ordination(mpra, ordBC) +
geom_point(aes(shape=factor(sample_data(mpra)$Group),
color=factor(sample_data(mpra)$Group)),
size=4) + theme_classic() + theme(legend.title = element_blank())
sigtab$Genus = factor(as.character(sigtab$rank_5), levels=names(x))
sigtab
setwd("/Volumes/UUI/zebrafishGutMicrobiome/taxonomicAnalysis/metacodr/")
library(readr)
library(dplyr)
library(metacoder)
library(vegan)
library(ggplot2)
library(agricolae)
library(phyloseq)
#load in the data
otu_data <- read_tsv("zebrafish_otu.tsv")
tax_data <- read_tsv("taxAssignments.tsv")
zeb_samples <- read_tsv("sample_data.tsv", col_types = "cc")
#Merge the OTU data with the taxa data
tax_data$`OTUs` <- as.character(tax_data$`OTUs`)
otu_data$OTUs <- as.character(otu_data$OTUs)
otu_data <- left_join(otu_data, tax_data,
by = c("OTUs" = "OTUs"))
#Create a metacoder object
obj <- parse_tax_data(otu_data,
class_cols = "Lineage", # the column that contains taxonomic information
class_sep = ";", # The character used to separate taxa in the classification
class_regex = "^(.+)_(.+)$", # Regex identifying where the data for each taxon is
class_key = c(tax_rank = "info", # A key describing each regex capture group
tax_name = "taxon_name"))
#Create a phyloseq object
ps_obj <- as_phyloseq(obj,
otu_table = "tax_data",
otu_id_col = "OTUs",
sample_data = zeb_samples,
sample_id_col = "Sample_Id")
#Compute the shannon diversity index
zeb_samples$alpha <- diversity(obj$data$tax_data[, zeb_samples$Sample_Id],
MARGIN = 2,
index = "invsimpson")
wilcox.test(alpha ~ Group, zeb_samples, alternative = "two.sided")
zeb_samples
# Define new object with relative abundance
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
DistBC = distance(mpra, method = "bray")
mpra
?distance()
?Distance
?distance
DistBC = distance(mpra, method = "bray")
DistBC = distance(mpra, method = "bray", type="group")
DistBC = distance(mpra)
# Define new object with relative abundance
library(phyloseq)
mpra = transform_sample_counts(ps_obj, function(x) x / sum(x))
mpra
DistBC = distance(mpra, method = "bray")
