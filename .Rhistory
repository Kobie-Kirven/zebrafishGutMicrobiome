p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") + theme(axis.text.x = '')
p + labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") + theme(axis.text.x = ' ')
p + labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
library(ggplot2)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/methods_output.csv", header=FALSE)
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
p + theme(axis.text.x=element_blank())+ labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
p + theme(axis.text.x=element_blank(), legend.title = element_blank())+ labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
library(ggplot2)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/chains_output.csv", header=FALSE)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/chains_output.csv", header=FALSE)
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(axis.text.x=element_blank(), legend.title = element_blank())+ labs(title="Crystalized Chains",
x="Chain", y = "# of Structures")
p + theme(legend = element_blank())+ labs(title="Crystalized Chains",
x="Chain", y = "# of Structures")
library(ggplot2)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/chains_output.csv", header=FALSE)
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(legend = element_blank())+ labs(title="Crystalized Chains",
x="Chain", y = "# of Structures")
p + theme(legend = element_blank())+ labs(title="Crystalized Chains", x="Chain", y = "# of Structures")
p + theme(legend = FALSE)+ labs(title="Crystalized Chains", x="Chain", y = "# of Structures")
p + theme(legend.position = "none")+ labs(title="Crystalized Chains", x="Chain", y = "# of Structures")
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(legend.position = "none")+ labs(title="Length Crystalized Structures", x="Length (aa)", y = "# of Structures")
library(ggplot2)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/lengths_output.csv", header=FALSE)
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(legend.position = "none")+ labs(title="Length Crystalized Structures", x="Length (aa)", y = "# of Structures")
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_line(stat="identity") +xlab("")
p + theme(legend.position = "none")+ labs(title="Length Crystalized Structures", x="Length (aa)", y = "# of Structures")
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(legend.position = "none")+ labs(title="Length Crystalized Structures", x="Length (aa)", y = "# of Structures")
p + theme(legend.position = "none")+ labs(title="Length of Crystalized Structures", x="Length (aa)", y = "# of Structures")
# Load ggplot2
library(ggplot2)
# Create Data
amino = read.csv("Desktop/biochemistry_research/research_lab/organisms.csv", header=FALSE)
# Create Data
amino = read.csv("Desktop/Bioinformatics_Project/part2/organisms.csv", header=FALSE)
# Load ggplot2
library(ggplot2)
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms.csv", header=FALSE)
View(organisms)
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
View(organisms)
Desktop/Bioinformatics_Project/part2/
Desktop/Bioinformatics_Project/part2/
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
# Basic piechart
ggplot(data, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Load ggplot2
library(ggplot2)
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
# Basic piechart
ggplot(data, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1) +
coord_polar("y", start=0)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=0.2, color="white") +
coord_polar("y", start=0) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity", width=0.01, color="white") +
coord_polar("y", start=0) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme(legend.title = "Source Organism")
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme(legend.title = "Source Organism")+
theme_void()
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme(legend.title = "Source Organism") +
theme_void()
theme(legend.title = element_blank() +
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme(legend.title = element_blank()) +
theme_void()
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
theme(legend.title = element_blank()) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
guides(fill=guide_legend(title="New Legend Title")) +
theme_void()
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
guides(fill=guide_legend(title="Source Organism")) +
theme_void()
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
guides(fill=guide_legend(title="Source Organism")) +
theme_void()
# Create Data
organisms = read.csv("Desktop/Bioinformatics_Project/part2/organisms_output.csv", header=FALSE)
# Basic piechart
ggplot(organisms, aes(x="", y=V2, fill=V1)) +
geom_bar(stat="identity") +
coord_polar("y", start=0) +
guides(fill=guide_legend(title="Source Organism")) +
theme_void()
library(ggplot2)
pdb = read.csv("Desktop/Bioinformatics_Project/part2/method_output.csv", header=FALSE)
p<-ggplot(data=pdb, aes(x =V1, y=V2, fill=V1)) +
geom_bar(stat="identity") +xlab("")
p + theme(axis.text.x=element_blank(), legend.title = element_blank())+ labs(title="Crystalization Methods",
x="Method", y = "# of Structures") +  scale_fill_manual(values=c("#BB8FCE", "#85C1E9", "#58D68D","#F4D03F" ))
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/lengths_output.csv", header=FALSE)
View(lengths)
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_histogram()
p = ggplot(data=lengths, aes(x=V1, fill=V1))
p + geom_histogram()
lengths = read.csv("Desktop/Bioinformatics_Project/part2/lengths.txt", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=V1))
p + geom_histogram()
lengths = read.csv("Desktop/Bioinformatics_Project/part2/lengths.csv", header=FALSE)
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/lengths.csv", header=FALSE)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/length.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=V1))
p + geom_histogram()
qplot(lengths, geom="histogram",
binwidth = 0.5,
main = "Histogram for Age"))
qplot(lengths, geom="histogram",
binwidth = 0.5,
main = "Histogram for Age")
lengths = read.csv("Desktop/Bioinformatics_Project/part2/length.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=V1))
p + geom_histogram()
qplot(lengths, geom="histogram",
binwidth = 0.5,
main = "Histogram for Age")
p = ggplot(data=lengths, aes(x=V1, fill=V1))
p + geom_histogram()
p + geom_histogram(binwidth = 10)
p + geom_histogram(binwidth = 20)
p + geom_histogram(binwidth = 23)
p + geom_histogram(binwidth = 23) + labs(title="Length of Structures")
p + geom_histogram(binwidth = 23) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
p = ggplot(data=lengths, aes(x=V1, fill=count))
p + geom_histogram(binwidth = 23) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
p = ggplot(data=lengths, aes(x=V1, fill=..count..))
p + geom_histogram(binwidth = 23) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
p + geom_histogram(binwidth = 23, show.legend = FALSE) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/hydrogen_output.csv", header=FALSE)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/models_output/hydrogen_output.csv", header=FALSE)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_output/hydrogen_output.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=..count..))
p + geom_histogram(binwidth = 23, show.legend = FALSE) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_output/hydrogen_output.csv", header=FALSE)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_output/hydrogen_outputs.csv", header=FALSE)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_outputs/hydrogen_output.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=..count..))
p + geom_histogram(binwidth = 23, show.legend = FALSE) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
p + geom_point()
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=..count..))
p + geom_point()
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_outputs/hydrogen_output.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=..count..))
p + geom_point()
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_point()
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1, show.legend=FALSE))
p + geom_point()
p + geom_point(show.legend=FALSE)
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + xlab('')
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_outputs/hydrogen_output.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + xlab('')
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_outputs/hydrogen_output.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
lengths = read.csv("Desktop/Bioinformatics_Project/part2/model_outputs/hydrogen_output_.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1,y=V2, fill=V1))
p + geom_point(show.legend=FALSE) + labs(x= "Length in Residues", y="Distance Difference") + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())
p + geom_histogram(binwidth = 23, show.legend = FALSE) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
lengths = read.csv("Desktop/Bioinformatics_Project/part2/length.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=..count..))
library(ggplot2)
lengths = read.csv("Desktop/Bioinformatics_Project/part2/length.csv", header=FALSE)
p = ggplot(data=lengths, aes(x=V1, fill=..count..))
p + geom_histogram(binwidth = 23, show.legend = FALSE) + labs(title="Length of Structures", x= "Length in Residues", y=" # of Structures")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
source("http://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
r
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
install.packages("ShotgunFunctionalizeR", contriburl="http://shotgun.zool.gu.se")
install.packages("/Volumes/Elements/ShotgunFunctionalizeR_1.2-9.tar", repos = NULL)
install.packages("/Volumes/Elements/ShotgunFunctionalizeR_1.2-9.tar", repos = NULL)
install.packages("/Volumes/Elements/ShotgunFunctionalizeR_1.2-9.tar", repos = NULL, type="source")
install.packages("optparse")
install.packages("NOISeq")
install.packages("XML")
install.packages("Rsamtools")
install.packages("Repitools")
install.packages("rtracklayer")
Rscript scripts/installDependencies.r
install.packages("hclust2")
setwd("/Volumes/Elements")
library(edgeR)
install.packages(edgeR)
install.packages("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library(edgeR)
raw_counts <- read.table("cog-counts-raw.txt", header=TRUE, row.names = 1)
raw_counts <- read.table("cog-count-raw.txt", header=TRUE, row.names = 1)
raw_counts <- read.table("cog_count_raw.txt", header=TRUE, row.names = 1)
raw_counts <- as.matrix(raw_counts)
head(raw_counts)
raw_counts <- read.table("cog_count_raw.txt", header=TRUE)
raw_counts <- read.table("cog_count_raw.txt", header=TRUE)
raw_counts <- as.matrix(raw_counts)
head(raw_counts)
dge2 <- DGEList(raw_counts)
dge2
dge <- calcNormFactors(dge2, method = "TMM")
dge
pseudo_TMM <- log2(cpm(dge) + 1)
df_TMM <- melt(pseudo_TMM, id = rownames(raw_counts_wn))
install.packages("reshape"); library(reshape)
pseudo_TMM <- log2(cpm(dge) + 1)
df_TMM <- melt(pseudo_TMM, id = rownames(raw_counts_wn))
names(df_TMM)[1:2] <- c ("id", "sample")
df_TMM$group <- substr(as.character(df_TMM$sample), 1,
nchar(as.character(df_TMM$sample)) - 5)
df_TMM$method <- rep("TMM", nrow(df_TMM))
dr_TMM
df_TMM
pseudo_TMM <- log2(cpm(dge) + 1)
df_TMM <- melt(pseudo_TMM, id = rownames(raw_counts_wn))
names(df_TMM)[1:2] <- c ("COG", "sample")
df_TMM$group <- substr(as.character(df_TMM$sample), 1,
nchar(as.character(df_TMM$sample)) - 5)
df_TMM$method <- rep("TMM", nrow(df_TMM))
df_TMM
write.table(df_TMM, file="mymatrix.txt", row.names=TRUE, col.names=TRUE)
write.table(df_TMM, file="mymatrix.txt", row.names=FALSE, col.names=TRUE, sep="\t")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
Heatmap(m)
library(ComplexHeatmap)
Heatmap(m)
Heatmap(m)
Heatmap(m)
setwd("~/Documents/Github/zebrafishGutMicrobiome/")
#Input the data from the EC's identified by weka
inputData <- read.csv("mifaser_heatmap_data.csv")
#Turn the data table into a matrix
m <- as.matrix(inputData[, -1])
#Add in the EC's as rownames
rownames(m) <- inputData$X
#Import RColorBrewer so that we can change the heatmap colors
library("RColorBrewer")
#Create the heatmap
heatmap(m, Colv = NA, Rowv = NA, col=brewer.pal(9,"Blues"))
library("Bioc")
Heatmap(m)
#Import RColorBrewer so that we can change the heatmap colors
library("RColorBrewer")
#Create the heatmap
heatmap(m, Colv = NA, Rowv = NA, col=brewer.pal(9,"Blues"))
library(circlize)
col_fun = colorRamp2(c(0, 2000), c("green","red"))
col_fun(seq(-3, 3))
Heatmap(m)
Heatmap(m, col = col_fun)
col_fun = colorRamp2(c(0, 2000), c("#E7F6FF","#60C6FF"))
col_fun(seq(-3, 3))
Heatmap(m, col = col_fun)
col_fun = colorRamp2(c(0, 1000, 2000), c("#E7F6FF","#A1DDFF" "#60C6FF"))
col_fun = colorRamp2(c(0, 1000, 2000), c("#E7F6FF","#A1DDFF" "#60C6FF"))
col_fun = colorRamp2(c(0, 1000, 2000), c("#E7F6FF","#A1DDFF", "#60C6FF"))
col_fun(seq(-3, 3))
Heatmap(m, col = col_fun)
col_fun = colorRamp2(c(0, 500, 2000), c("#E7F6FF","#A1DDFF", "#60C6FF"))
col_fun(seq(-3, 3))
Heatmap(m, col = col_fun)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE
cluster_columns = FALSE) )
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE,
cluster_columns = FALSE) )
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun = colorRamp2(c(0, 500, 2000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-3, 3))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun = colorRamp2(c(0, 500, 1000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-3, 3))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun(seq(-5, 5))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun(seq(-50, 50))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun(seq(-50, 10))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun = colorRamp2(c(0, 500, 2000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-50, 10))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun = colorRamp2(c(0, 50, 2000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-50, 10))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
col_fun = colorRamp2(c(0, 500, 2000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-50, 10))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
column_km = 3)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
column_km = 2)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left")
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 3))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 7))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental")))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 1))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 2))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 3))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 4))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 5))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 6))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 7))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left", column_split = rep(c("Normal", "Experimental"), 8))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left")
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",
top_annotation = HeatmapAnnotation(foo = anno_block(gp = gpar(fill = 2:4),
labels = c("group1", "group2"),
labels_gp = gpar(col = "white", fontsize = 10))),
column_km = 2)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",  column_split = split, top_annotation = ha,
column_title = NULL
)
ha = HeatmapAnnotation(
empty = anno_empty(border = FALSE),
foo = anno_block(gp = gpar(fill = 2:6), labels =labels = c("group1", "group2"
))
)
empty = anno_empty(border = FALSE),
foo = anno_block(gp = gpar(fill = 2:6), labels =labels = c("group1", "group2"))
empty = anno_empty(border = FALSE),
foo = anno_block(gp = gpar(fill = 2:6), labels =c("group1", "group2"))
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",  column_split = split, top_annotation = ha,
column_title = NULL
)
Heatmap(m, name = "mat2", column_split = split, top_annotation = ha,
column_title = NULL)
ha = HeatmapAnnotation(
empty = anno_empty(border = FALSE),
foo = anno_block(gp = gpar(fill = 2:6), labels = LETTERS[1:5])
)
Heatmap(m, name = "mat2", column_split = split, top_annotation = ha,
column_title = NULL)
Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",
)
hmp = Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",
)
draw(hmp, ht_gap = unit(3, "mm"))
hmp
x = i/ncol(m)
decorate_heatmap_body("cases", {
i = which(colnames(m) == "E1")
x = i/ncol(m)
grid.lines(c(x, x), c(0, 1), gp = gpar(lwd = 2, lty = 2))
grid.text("Vaccine introduced", x, unit(1, "npc") + unit(5, "mm"))
})
decorate_heatmap_body("matrix_39", {
i = which(colnames(m) == "E1")
x = i/ncol(m)
grid.lines(c(x, x), c(0, 1), gp = gpar(lwd = 2, lty = 2))
grid.text("Vaccine introduced", x, unit(1, "npc") + unit(5, "mm"))
})
i = which(colnames(m) == "N4")
hmp = Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",
)
decorate_heatmap_body("matrix_39", {
i = which(colnames(m) == "N4")
x = i/ncol(m)
grid.lines(c(x, x), c(0, 1), gp = gpar(lwd = 2, lty = 2))
grid.text("Vaccine introduced", x, unit(1, "npc") + unit(5, "mm"))
})
source('~/Documents/GitHub/zebrafishGutMicrobiome/weka_heatmap.R', echo=TRUE)
setwd("~/Documents/Github/zebrafishGutMicrobiome/")
#Input the data from the EC's identified by weka
inputData <- read.csv("mifaser_heatmap_data.csv")
#Turn the data table into a matrix
m <- as.matrix(inputData[, -1])
#Add in the EC's as rownames
rownames(m) <- inputData$X
#Import RColorBrewer so that we can change the heatmap colors
library("RColorBrewer")
library(circlize)
col_fun = colorRamp2(c(0, 500, 2000), c("#FFFFFF","#A1DDFF", "#60C6FF"))
col_fun(seq(-50, 10))
hmp = Heatmap(m, col = col_fun, cluster_rows = FALSE,show_column_dend = FALSE, cluster_columns = FALSE,
row_names_side = "left",
)
decorate_heatmap_body("matrix_39", {
i = which(colnames(m) == "N4")
x = i/ncol(m)
grid.lines(c(x, x), c(0, 1), gp = gpar(lwd = 2, lty = 2))
grid.text("Vaccine introduced", x, unit(1, "npc") + unit(5, "mm"))
})
hmp
